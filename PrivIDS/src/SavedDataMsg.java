/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'SavedDataMsg'
 * message type.
 */

public class SavedDataMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 26;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 9;

    /** Create a new SavedDataMsg of size 26. */
    public SavedDataMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new SavedDataMsg of the given data_length. */
    public SavedDataMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new SavedDataMsg with the given data_length
     * and base offset.
     */
    public SavedDataMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new SavedDataMsg using the given byte array
     * as backing store.
     */
    public SavedDataMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new SavedDataMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public SavedDataMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new SavedDataMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public SavedDataMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new SavedDataMsg embedded in the given message
     * at the given base offset.
     */
    public SavedDataMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new SavedDataMsg embedded in the given message
     * at the given base offset and length.
     */
    public SavedDataMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <SavedDataMsg> \n";
      try {
        s += "  [counter=0x"+Long.toHexString(get_counter())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [savedDataIdx=0x"+Long.toHexString(get_savedDataIdx())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [savedData.nodeId=0x"+Long.toHexString(get_savedData_nodeId())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [savedData.kdcData.shared_key.keyType=0x"+Long.toHexString(get_savedData_kdcData_shared_key_keyType())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [savedData.kdcData.shared_key.keyValue=";
        for (int i = 0; i < 16; i++) {
          s += "0x"+Long.toHexString(getElement_savedData_kdcData_shared_key_keyValue(i) & 0xff)+" ";
        }
        s += "]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [savedData.kdcData.shared_key.dbgKeyID=0x"+Long.toHexString(get_savedData_kdcData_shared_key_dbgKeyID())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [savedData.idsData.neighbor_reputation=0x"+Long.toHexString(get_savedData_idsData_neighbor_reputation())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [savedData.idsData.nb_messages=0x"+Long.toHexString(get_savedData_idsData_nb_messages())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: counter
    //   Field type: int
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'counter' is signed (false).
     */
    public static boolean isSigned_counter() {
        return false;
    }

    /**
     * Return whether the field 'counter' is an array (false).
     */
    public static boolean isArray_counter() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'counter'
     */
    public static int offset_counter() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'counter'
     */
    public static int offsetBits_counter() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'counter'
     */
    public int get_counter() {
        return (int)getUIntBEElement(offsetBits_counter(), 16);
    }

    /**
     * Set the value of the field 'counter'
     */
    public void set_counter(int value) {
        setUIntBEElement(offsetBits_counter(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'counter'
     */
    public static int size_counter() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'counter'
     */
    public static int sizeBits_counter() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: savedDataIdx
    //   Field type: short
    //   Offset (bits): 16
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'savedDataIdx' is signed (false).
     */
    public static boolean isSigned_savedDataIdx() {
        return false;
    }

    /**
     * Return whether the field 'savedDataIdx' is an array (false).
     */
    public static boolean isArray_savedDataIdx() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'savedDataIdx'
     */
    public static int offset_savedDataIdx() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'savedDataIdx'
     */
    public static int offsetBits_savedDataIdx() {
        return 16;
    }

    /**
     * Return the value (as a short) of the field 'savedDataIdx'
     */
    public short get_savedDataIdx() {
        return (short)getUIntBEElement(offsetBits_savedDataIdx(), 8);
    }

    /**
     * Set the value of the field 'savedDataIdx'
     */
    public void set_savedDataIdx(short value) {
        setUIntBEElement(offsetBits_savedDataIdx(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'savedDataIdx'
     */
    public static int size_savedDataIdx() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'savedDataIdx'
     */
    public static int sizeBits_savedDataIdx() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: savedData.nodeId
    //   Field type: int
    //   Offset (bits): 24
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'savedData.nodeId' is signed (false).
     */
    public static boolean isSigned_savedData_nodeId() {
        return false;
    }

    /**
     * Return whether the field 'savedData.nodeId' is an array (false).
     */
    public static boolean isArray_savedData_nodeId() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'savedData.nodeId'
     */
    public static int offset_savedData_nodeId() {
        return (24 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'savedData.nodeId'
     */
    public static int offsetBits_savedData_nodeId() {
        return 24;
    }

    /**
     * Return the value (as a int) of the field 'savedData.nodeId'
     */
    public int get_savedData_nodeId() {
        return (int)getUIntBEElement(offsetBits_savedData_nodeId(), 16);
    }

    /**
     * Set the value of the field 'savedData.nodeId'
     */
    public void set_savedData_nodeId(int value) {
        setUIntBEElement(offsetBits_savedData_nodeId(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'savedData.nodeId'
     */
    public static int size_savedData_nodeId() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'savedData.nodeId'
     */
    public static int sizeBits_savedData_nodeId() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: savedData.kdcData.shared_key.keyType
    //   Field type: short
    //   Offset (bits): 40
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'savedData.kdcData.shared_key.keyType' is signed (false).
     */
    public static boolean isSigned_savedData_kdcData_shared_key_keyType() {
        return false;
    }

    /**
     * Return whether the field 'savedData.kdcData.shared_key.keyType' is an array (false).
     */
    public static boolean isArray_savedData_kdcData_shared_key_keyType() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'savedData.kdcData.shared_key.keyType'
     */
    public static int offset_savedData_kdcData_shared_key_keyType() {
        return (40 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'savedData.kdcData.shared_key.keyType'
     */
    public static int offsetBits_savedData_kdcData_shared_key_keyType() {
        return 40;
    }

    /**
     * Return the value (as a short) of the field 'savedData.kdcData.shared_key.keyType'
     */
    public short get_savedData_kdcData_shared_key_keyType() {
        return (short)getUIntBEElement(offsetBits_savedData_kdcData_shared_key_keyType(), 8);
    }

    /**
     * Set the value of the field 'savedData.kdcData.shared_key.keyType'
     */
    public void set_savedData_kdcData_shared_key_keyType(short value) {
        setUIntBEElement(offsetBits_savedData_kdcData_shared_key_keyType(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'savedData.kdcData.shared_key.keyType'
     */
    public static int size_savedData_kdcData_shared_key_keyType() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'savedData.kdcData.shared_key.keyType'
     */
    public static int sizeBits_savedData_kdcData_shared_key_keyType() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: savedData.kdcData.shared_key.keyValue
    //   Field type: short[]
    //   Offset (bits): 48
    //   Size of each element (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'savedData.kdcData.shared_key.keyValue' is signed (false).
     */
    public static boolean isSigned_savedData_kdcData_shared_key_keyValue() {
        return false;
    }

    /**
     * Return whether the field 'savedData.kdcData.shared_key.keyValue' is an array (true).
     */
    public static boolean isArray_savedData_kdcData_shared_key_keyValue() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'savedData.kdcData.shared_key.keyValue'
     */
    public static int offset_savedData_kdcData_shared_key_keyValue(int index1) {
        int offset = 48;
        if (index1 < 0 || index1 >= 16) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 8;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'savedData.kdcData.shared_key.keyValue'
     */
    public static int offsetBits_savedData_kdcData_shared_key_keyValue(int index1) {
        int offset = 48;
        if (index1 < 0 || index1 >= 16) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 8;
        return offset;
    }

    /**
     * Return the entire array 'savedData.kdcData.shared_key.keyValue' as a short[]
     */
    public short[] get_savedData_kdcData_shared_key_keyValue() {
        short[] tmp = new short[16];
        for (int index0 = 0; index0 < numElements_savedData_kdcData_shared_key_keyValue(0); index0++) {
            tmp[index0] = getElement_savedData_kdcData_shared_key_keyValue(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'savedData.kdcData.shared_key.keyValue' from the given short[]
     */
    public void set_savedData_kdcData_shared_key_keyValue(short[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_savedData_kdcData_shared_key_keyValue(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a short) of the array 'savedData.kdcData.shared_key.keyValue'
     */
    public short getElement_savedData_kdcData_shared_key_keyValue(int index1) {
        return (short)getUIntBEElement(offsetBits_savedData_kdcData_shared_key_keyValue(index1), 8);
    }

    /**
     * Set an element of the array 'savedData.kdcData.shared_key.keyValue'
     */
    public void setElement_savedData_kdcData_shared_key_keyValue(int index1, short value) {
        setUIntBEElement(offsetBits_savedData_kdcData_shared_key_keyValue(index1), 8, value);
    }

    /**
     * Return the total size, in bytes, of the array 'savedData.kdcData.shared_key.keyValue'
     */
    public static int totalSize_savedData_kdcData_shared_key_keyValue() {
        return (128 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'savedData.kdcData.shared_key.keyValue'
     */
    public static int totalSizeBits_savedData_kdcData_shared_key_keyValue() {
        return 128;
    }

    /**
     * Return the size, in bytes, of each element of the array 'savedData.kdcData.shared_key.keyValue'
     */
    public static int elementSize_savedData_kdcData_shared_key_keyValue() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'savedData.kdcData.shared_key.keyValue'
     */
    public static int elementSizeBits_savedData_kdcData_shared_key_keyValue() {
        return 8;
    }

    /**
     * Return the number of dimensions in the array 'savedData.kdcData.shared_key.keyValue'
     */
    public static int numDimensions_savedData_kdcData_shared_key_keyValue() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'savedData.kdcData.shared_key.keyValue'
     */
    public static int numElements_savedData_kdcData_shared_key_keyValue() {
        return 16;
    }

    /**
     * Return the number of elements in the array 'savedData.kdcData.shared_key.keyValue'
     * for the given dimension.
     */
    public static int numElements_savedData_kdcData_shared_key_keyValue(int dimension) {
      int array_dims[] = { 16,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

    /**
     * Fill in the array 'savedData.kdcData.shared_key.keyValue' with a String
     */
    public void setString_savedData_kdcData_shared_key_keyValue(String s) { 
         int len = s.length();
         int i;
         for (i = 0; i < len; i++) {
             setElement_savedData_kdcData_shared_key_keyValue(i, (short)s.charAt(i));
         }
         setElement_savedData_kdcData_shared_key_keyValue(i, (short)0); //null terminate
    }

    /**
     * Read the array 'savedData.kdcData.shared_key.keyValue' as a String
     */
    public String getString_savedData_kdcData_shared_key_keyValue() { 
         char carr[] = new char[Math.min(net.tinyos.message.Message.MAX_CONVERTED_STRING_LENGTH,16)];
         int i;
         for (i = 0; i < carr.length; i++) {
             if ((char)getElement_savedData_kdcData_shared_key_keyValue(i) == (char)0) break;
             carr[i] = (char)getElement_savedData_kdcData_shared_key_keyValue(i);
         }
         return new String(carr,0,i);
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: savedData.kdcData.shared_key.dbgKeyID
    //   Field type: int
    //   Offset (bits): 176
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'savedData.kdcData.shared_key.dbgKeyID' is signed (false).
     */
    public static boolean isSigned_savedData_kdcData_shared_key_dbgKeyID() {
        return false;
    }

    /**
     * Return whether the field 'savedData.kdcData.shared_key.dbgKeyID' is an array (false).
     */
    public static boolean isArray_savedData_kdcData_shared_key_dbgKeyID() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'savedData.kdcData.shared_key.dbgKeyID'
     */
    public static int offset_savedData_kdcData_shared_key_dbgKeyID() {
        return (176 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'savedData.kdcData.shared_key.dbgKeyID'
     */
    public static int offsetBits_savedData_kdcData_shared_key_dbgKeyID() {
        return 176;
    }

    /**
     * Return the value (as a int) of the field 'savedData.kdcData.shared_key.dbgKeyID'
     */
    public int get_savedData_kdcData_shared_key_dbgKeyID() {
        return (int)getUIntBEElement(offsetBits_savedData_kdcData_shared_key_dbgKeyID(), 16);
    }

    /**
     * Set the value of the field 'savedData.kdcData.shared_key.dbgKeyID'
     */
    public void set_savedData_kdcData_shared_key_dbgKeyID(int value) {
        setUIntBEElement(offsetBits_savedData_kdcData_shared_key_dbgKeyID(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'savedData.kdcData.shared_key.dbgKeyID'
     */
    public static int size_savedData_kdcData_shared_key_dbgKeyID() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'savedData.kdcData.shared_key.dbgKeyID'
     */
    public static int sizeBits_savedData_kdcData_shared_key_dbgKeyID() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: savedData.idsData.neighbor_reputation
    //   Field type: short
    //   Offset (bits): 192
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'savedData.idsData.neighbor_reputation' is signed (false).
     */
    public static boolean isSigned_savedData_idsData_neighbor_reputation() {
        return false;
    }

    /**
     * Return whether the field 'savedData.idsData.neighbor_reputation' is an array (false).
     */
    public static boolean isArray_savedData_idsData_neighbor_reputation() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'savedData.idsData.neighbor_reputation'
     */
    public static int offset_savedData_idsData_neighbor_reputation() {
        return (192 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'savedData.idsData.neighbor_reputation'
     */
    public static int offsetBits_savedData_idsData_neighbor_reputation() {
        return 192;
    }

    /**
     * Return the value (as a short) of the field 'savedData.idsData.neighbor_reputation'
     */
    public short get_savedData_idsData_neighbor_reputation() {
        return (short)getUIntBEElement(offsetBits_savedData_idsData_neighbor_reputation(), 8);
    }

    /**
     * Set the value of the field 'savedData.idsData.neighbor_reputation'
     */
    public void set_savedData_idsData_neighbor_reputation(short value) {
        setUIntBEElement(offsetBits_savedData_idsData_neighbor_reputation(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'savedData.idsData.neighbor_reputation'
     */
    public static int size_savedData_idsData_neighbor_reputation() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'savedData.idsData.neighbor_reputation'
     */
    public static int sizeBits_savedData_idsData_neighbor_reputation() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: savedData.idsData.nb_messages
    //   Field type: short
    //   Offset (bits): 200
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'savedData.idsData.nb_messages' is signed (false).
     */
    public static boolean isSigned_savedData_idsData_nb_messages() {
        return false;
    }

    /**
     * Return whether the field 'savedData.idsData.nb_messages' is an array (false).
     */
    public static boolean isArray_savedData_idsData_nb_messages() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'savedData.idsData.nb_messages'
     */
    public static int offset_savedData_idsData_nb_messages() {
        return (200 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'savedData.idsData.nb_messages'
     */
    public static int offsetBits_savedData_idsData_nb_messages() {
        return 200;
    }

    /**
     * Return the value (as a short) of the field 'savedData.idsData.nb_messages'
     */
    public short get_savedData_idsData_nb_messages() {
        return (short)getUIntBEElement(offsetBits_savedData_idsData_nb_messages(), 8);
    }

    /**
     * Set the value of the field 'savedData.idsData.nb_messages'
     */
    public void set_savedData_idsData_nb_messages(short value) {
        setUIntBEElement(offsetBits_savedData_idsData_nb_messages(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'savedData.idsData.nb_messages'
     */
    public static int size_savedData_idsData_nb_messages() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'savedData.idsData.nb_messages'
     */
    public static int sizeBits_savedData_idsData_nb_messages() {
        return 8;
    }

}
